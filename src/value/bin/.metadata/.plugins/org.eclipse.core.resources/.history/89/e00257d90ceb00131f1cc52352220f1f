package com.bsb.portal.fe.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.bsb.portal.common.Device.DeviceGroup;
import com.bsb.portal.constants.AnalyticsConstants;
import com.bsb.portal.context.PortalContext;
import com.bsb.portal.dto.PhotoAlbum;
import com.bsb.portal.dto.QriousMetaData;
import com.bsb.portal.dto.Tweet;
import com.bsb.portal.dto.Video;
import com.bsb.portal.fe.analytics.ElectionAnalytics;
import com.bsb.portal.fe.delivery.DeliveryFactory;
import com.bsb.portal.fe.delivery.model.BaseTopNewsModel;
import com.bsb.portal.fe.delivery.services.DeliveryService;




@Controller
@RequestMapping(value = "/fifa")
public class FifaController extends BasePhotoController{

	@Override
	protected String getSiteId() {
		
		return AnalyticsConstants.CATEGORY_FIFA;
	}

}


@RequestMapping(value = {"","/","/index","/main"})
public ModelAndView getElectionData(HttpServletRequest request) {
	Map<String, Object> model = getModel(request);
	DeviceGroup deviceGroup = PortalContext.getDeviceContext().getDeviceGroup();
    if(deviceGroup.getGroupName().equalsIgnoreCase("lowA")){
		
		return new ModelAndView("redirect:/news/index.html?c=election&p=1");
		
	}
	model.put("newslist",electionService.getRelatedNews());
	DeliveryService deliveryService = DeliveryFactory.getDeliveryService();
	 // big story news
    BaseTopNewsModel bigStoryNewsList = null;
    bigStoryNewsList = getTopNews(deliveryService,"election");
    model.put("bigStoryNewsList", bigStoryNewsList);
	//model.put("bigStoryNewsList",electionService.getBigStoryNews());
	List<PhotoAlbum> photos = electionService.getGalleries();
	List<PhotoAlbum> bigStoryPhotos = electionService.getBigStoryGalleries();

	photos = photos.size()>=NUMB_GALLERY_PER_PAGE ? photos.subList(0, NUMB_GALLERY_PER_PAGE) : photos;

	Map<DeviceGroup, List<Video>> videos = electionService.getRelatedVideos();
	Map<DeviceGroup, List<Video>> bigStoryVideos = electionService.getBigStoryVideos();
	
	if(deviceGroup.getGroupId() != DeviceGroup.SUPER_SMART.getGroupId()){
		photos = photos.size()>=NUMB_GALLERY_TOP_PAGE ? photos.subList(0, NUMB_GALLERY_TOP_PAGE) : photos;
		bigStoryPhotos = bigStoryPhotos.size()>=NUMB_GALLERY_TOP_PAGE ? bigStoryPhotos.subList(0, NUMB_GALLERY_TOP_PAGE) : bigStoryPhotos;
	}
		

		model.put("galleries",photos);
		model.put("bigStoryGalleries", bigStoryPhotos);

		List<Video> relatedVideos = getRelatedVideos(deviceGroup, videos);
		List<Video> bigStoryRelatedVideos = getRelatedVideos(deviceGroup, bigStoryVideos);

		model.put("moduleSeq", electionService.getModuleSeq());

		Set<String> politicianNames = starService.getPoliticianNames();
		if(politicianNames != null && !politicianNames.isEmpty())
		{
			Set<String> featuredPolitician = starService.getFeaturedPoliticianNames();
			List<String> featuredStarsList = new ArrayList<>(featuredPolitician);
			Collections.shuffle(featuredStarsList);
			model.put("featuredStars", featuredStarsList.size() > NUMB_GALLERY_TOP_PAGE ? featuredStarsList.subList(0,NUMB_GALLERY_TOP_PAGE) : featuredStarsList);


			model.put("allstarmetadata", starService.getStarMetaDatas());
		}
		List<QriousMetaData> qriousMetaDatas = qriousService.getQriousQuestions(QRIOUS_SRCH_TITLE, QRIOUS_SRCH_CAT);

		model.put("language", PortalContext.getI18nContext().getLang());

		model.put("qriousContent", msService.getTopQriousContent(qriousMetaDatas));

		model.put("relatedVideos",relatedVideos);
		model.put("bigStoryRelatedVideos",bigStoryRelatedVideos);
		model.put("pgeid", "index");
		insertPoll(model);
		
		ElectionAnalytics.ElectionSourcePage pageId = ElectionAnalytics.ElectionSourcePage.TTP;
		addAnalytics(request, model, pageId);
		
		List<Tweet> tweetList =getTweetList(TWEETS_COUNT,request,pageId.name());
		model.put("tweetlist", tweetList);
		putBannerData(model, deviceGroup);
       
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		String []presentDate = sdf.format(date).split("/");
		model.put("presentDate", Integer.parseInt(presentDate[2]));
		model.put("presentMonth", Integer.parseInt(presentDate[1]));
        model.put("withOutCounting", "true");
        
        
        // new trending override from basecontroller
        model.put("showTrending", false);
        addTrendingKeywords(request, model, "election");
        
		return new ModelAndView("elections/main", model);

}